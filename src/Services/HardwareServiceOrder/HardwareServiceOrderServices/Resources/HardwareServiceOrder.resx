<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssetRepairEmail" xml:space="preserve">
    <value>Hello {{FirstName}}!

You registered a [repair order]({{OrderLink}}) [{{OrderDate}}], but we cannot see having received the asset. Please follow the instructions below so we can help you fix it!

Next steps:

1. Backup your device
2. Factory reset your device
3. Remove the SIM card

⚠️ if step 1 to 3 is not done properly the repair cannot be completed

4. Send the device to the repair provider using the package slip
5. The repair provider evaluates your device
6. You get repair options to choose from (not if warranty)
7. The repair provider repairs your asset and sends it back to you

[Get package slip]({{PackageSlipLink}})

PS: The repair provider may contact you directly about the repair.</value>
  </data>
  <data name="OrderConfirmationEmail" xml:space="preserve">
    <value>Hello {{FirstName}}!

### **Order details:**

Assets: {{AssetName}} ({{AssetId}})  
Order date: {{OrderDate}}  
Repair type: {{RepairType}}  
Fault category: {{FaultCategory}}

[View order in Origo]({{OrderLink}})

### **Next steps:** 
1. Backup your device
2. Factory reset your device
3. Remove SIM card

⚠️ if step 1 to 3 is not done properly the repair cannot be completed

4. Send the device to the repair provider using the package slip
5. The repair provider evaluates your device
6. You get repair options to choose from (not if warranty)
7. The repair provider repairs your device and sends it back to you

[Get package slip](PackageSlipLink)

PS: The repair provider may contact you directly about the repair.


### **Loan device:**

During the repair period you can get a loan device from your company. Contact [loan device contact info](LoanDeviceContact) if you need a loan device.</value>
  </data>
  <data name="LoanDeviceEmail" xml:space="preserve">
    <value>Hello {{FirstName}}!

I connection to a recent repair order we would like to remind you to return any loan device.</value>
  </data>
  <data name="AssetDiscardedEmail" xml:space="preserve">
    <value>Hello {{FirstName}}!

In connection to a recent repair order your asset was discarded. Please contact your manager to get a new asset.</value>
  </data>
  <data name="OrderCancellationEmail" xml:space="preserve">
    <value>Hello {{FirstName}}!

Your repair order is canceled. If your asset still needs repair please create a new repair order.


### **Order details:**

Assets: {{AssetName}} ({{AssetId}})  
Order date: {{OrderDate}}  
Repair type: {{RepairType}}  
Fault category: {{FaultCategory}}

[View order in Origo]({{OrderLink}})</value>
  </data>
  <data name="OngoingUserActionNeeded_Body" xml:space="preserve">
    <value />
  </data>
  <data name="OngoingUserActionNeeded_Subject" xml:space="preserve">
    <value />
  </data>
  <data name="RegisteredUserActionNeeded_Subject" xml:space="preserve">
    <value />
  </data>
  <data name="RegisteredUserActionNeeded_Body" xml:space="preserve">
    <value />
  </data>
  <data name="Unknown_Subject" xml:space="preserve">
    <value>Something went wrong with an order</value>
  </data>
  <data name="Unknown_Body" xml:space="preserve">
    <value>Hi There,

The following order has received unknown status from the service provider. Please have a look.

[View Order](OrderLink)

{{Order}}</value>
  </data>
  <data name="AssetRepairEmail_Subject" xml:space="preserve">
    <value>Repair Reminder</value>
  </data>
  <data name="LoanDeviceEmail_Subject" xml:space="preserve">
    <value>Return Loan Device</value>
  </data>
  <data name="AssetDiscardedEmail_Subject" xml:space="preserve">
    <value>Replace Discarded Asset</value>
  </data>
  <data name="OrderCancellationEmail_Subject" xml:space="preserve">
    <value>Canceled Repair Order</value>
  </data>
  <data name="RemarketingNoPackaging_Body" xml:space="preserve">
    <value>Hello {{ FirstName }}!


### Return details:
Asset: {{ AssetName }} {{ AssetId }}
Date: {{ OrderDate }}

### Next steps:
1. Transfer all data from the old asset to the new asset
2. Factory reset/delete all data from the old asset
3. (if iPhone) Deactivate Find my iPhone
4. Remove the SIM card/memory card
5. Package and send asset

If step 1 to 4 is not done properly the recycle cannot be completed

### How to package and send the asset:
Please package your device securely so that it arrives undamaged. You will need to print the return package slip and use transparent tape to attach the slip on the outside of the package.

### Get Return Shipping Label

PS: The provider may contact you directly about the return.</value>
  </data>
  <data name="RemarketingNoPackaging_Subject" xml:space="preserve">
    <value>Repair Order</value>
  </data>
  <data name="RemarketingPackaging_Body" xml:space="preserve">
    <value>Hello {{ FirstName }}!


### Return details:
Asset: {{ AssetName }} {{ AssetId }}
Date: {{ OrderDate }}

### Would you like to receive packaging?
Yes
Address: {{ Address }}

### Next steps:
1. Receive return packaging and shipping label
2. Transfer all data from the old asset to the new asset
3. Factory reset/delete all data from the old asset
4. (if iPhone) Deactivate Find my iPhone
5. Remove the SIM card/memory card
6. Ship the asset using the return package

If step 2 to 5 is not done properly the recycle cannot be completed

PS: The provider may contact you directly about the return.</value>
  </data>
  <data name="RemarketingPackaging_Subject" xml:space="preserve">
    <value>Repair Order (Included Packaging Service)</value>
  </data>
</root>