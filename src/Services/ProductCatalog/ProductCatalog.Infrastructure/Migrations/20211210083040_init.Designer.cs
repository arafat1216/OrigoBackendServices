// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductCatalog.Infrastructure.Infrastructure.Context;

#nullable disable

namespace ProductCatalog.Infrastructure.Migrations
{
    [DbContext(typeof(ProductCatalogContext))]
    [Migration("20211210083040_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FeatureCatalog.Infrastructure.Models.Database.Joins.FeatureExcludes", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("ExcludesFeatureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeatureId", "ExcludesFeatureId");

                    b.HasIndex("ExcludesFeatureId");

                    b.ToTable("FeatureExcludes");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("FeatureCatalog.Infrastructure.Models.Database.Joins.FeatureRequiresAll", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("RequiresFeatureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeatureId", "RequiresFeatureId");

                    b.HasIndex("RequiresFeatureId");

                    b.ToTable("FeatureRequiresAll");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("FeatureCatalog.Infrastructure.Models.Database.Joins.FeatureRequiresOne", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("RequiresFeatureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeatureId", "RequiresFeatureId");

                    b.HasIndex("RequiresFeatureId");

                    b.ToTable("FeatureRequiresOne");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessControlPermissionNode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("FeatureTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("AccessControlPermissionNode");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("Features");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessControlPermissionNode = "BasicUserManagement",
                            FeatureTypeId = 1,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 2,
                            AccessControlPermissionNode = "BasicAssetManagement ",
                            FeatureTypeId = 1,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.FeatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductExcludes", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ExcludesProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "ExcludesProductId");

                    b.HasIndex("ExcludesProductId");

                    b.ToTable("ProductExcludes");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeatureId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeatures");

                    b
                        .HasComment("Join table")
                        .ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductRequiresAll", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RequiresProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "RequiresProductId");

                    b.HasIndex("RequiresProductId");

                    b.ToTable("ProductRequiresAll");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductRequiresOne", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RequiresProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "RequiresProductId");

                    b.HasIndex("RequiresProductId");

                    b.ToTable("ProductRequiresOne");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 2,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 3,
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("FeatureCatalog.Infrastructure.Models.Database.Joins.FeatureExcludes", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Feature", "RequiresFeature")
                        .WithMany("HasExcludesDependenciesFrom")
                        .HasForeignKey("ExcludesFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Feature", "Feature")
                        .WithMany("Excludes")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("RequiresFeature");
                });

            modelBuilder.Entity("FeatureCatalog.Infrastructure.Models.Database.Joins.FeatureRequiresAll", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Feature", "Feature")
                        .WithMany("RequiresAll")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Feature", "RequiresFeature")
                        .WithMany("HasRequiresAllDependenciesFrom")
                        .HasForeignKey("RequiresFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("RequiresFeature");
                });

            modelBuilder.Entity("FeatureCatalog.Infrastructure.Models.Database.Joins.FeatureRequiresOne", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Feature", "Feature")
                        .WithMany("RequiresOne")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Feature", "RequiresFeature")
                        .WithMany("HasRequiresOneDependenciesFrom")
                        .HasForeignKey("RequiresFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("RequiresFeature");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Feature", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.FeatureType", "Type")
                        .WithMany("Features")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ProductCatalog.Infrastructure.Models.Database.FeatureTranslation", "Translations", b1 =>
                        {
                            b1.Property<int>("FeatureId")
                                .HasColumnType("int");

                            b1.Property<string>("Language")
                                .HasMaxLength(2)
                                .IsUnicode(false)
                                .HasColumnType("char(2)")
                                .IsFixedLength();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<DateTime>("PeriodEnd")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodEnd");

                            b1.Property<DateTime>("PeriodStart")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodStart");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("FeatureId", "Language");

                            b1.ToTable("FeatureTranslation");

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                {
                                    ttb
                                        .HasPeriodStart("PeriodStart")
                                        .HasColumnName("PeriodStart");
                                    ttb
                                        .HasPeriodEnd("PeriodEnd")
                                        .HasColumnName("PeriodEnd");
                                }
                            ));

                            b1.WithOwner()
                                .HasForeignKey("FeatureId");

                            b1.HasData(
                                new
                                {
                                    FeatureId = 1,
                                    Language = "en",
                                    Description = "Allows organizations to perform the basic user management tasks. This is an extension of the options that's available for all organizations.",
                                    Name = "Basic User Management",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    FeatureId = 1,
                                    Language = "nb",
                                    Description = "Lar en organisasjon utføre grunnleggende brukerbehandling. Dette er en utvidelse av funksjonaliteten som er tilgjengelig for alle organisasjoner.",
                                    Name = "Grunnleggende brukerhåndtering",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    FeatureId = 2,
                                    Language = "en",
                                    Description = "Allows organizations to perform the basic user management tasks.",
                                    Name = "Basic Asset Management",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    FeatureId = 2,
                                    Language = "nb",
                                    Description = "Lar en organisasjon utføre grunnleggende behandling av assets.",
                                    Name = "Grunnleggende asset-håndtering",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                });
                        });

                    b.Navigation("Translations");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.FeatureType", b =>
                {
                    b.OwnsMany("ProductCatalog.Infrastructure.Models.Database.FeatureTypeTranslation", "Translations", b1 =>
                        {
                            b1.Property<int>("FeatureTypeId")
                                .HasColumnType("int");

                            b1.Property<string>("Language")
                                .HasMaxLength(2)
                                .IsUnicode(false)
                                .HasColumnType("char(2)")
                                .IsFixedLength();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<DateTime>("PeriodEnd")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodEnd");

                            b1.Property<DateTime>("PeriodStart")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodStart");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("FeatureTypeId", "Language");

                            b1.ToTable("FeatureTypeTranslation");

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                {
                                    ttb
                                        .HasPeriodStart("PeriodStart")
                                        .HasColumnName("PeriodStart");
                                    ttb
                                        .HasPeriodEnd("PeriodEnd")
                                        .HasColumnName("PeriodEnd");
                                }
                            ));

                            b1.WithOwner()
                                .HasForeignKey("FeatureTypeId");

                            b1.HasData(
                                new
                                {
                                    FeatureTypeId = 1,
                                    Language = "en",
                                    Description = "The type is not set, or is a invalid value!",
                                    Name = "Unknown",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    FeatureTypeId = 1,
                                    Language = "nb",
                                    Description = "Typen er ikke satt, eller er en ugyldig verdi!",
                                    Name = "Ukjent",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                });
                        });

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductExcludes", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "RequiresProduct")
                        .WithMany("HasExcludesDependenciesFrom")
                        .HasForeignKey("ExcludesProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "Product")
                        .WithMany("Excludes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RequiresProduct");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductFeature", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductRequiresAll", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "Product")
                        .WithMany("RequiresAll")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "RequiresProduct")
                        .WithMany("HasRequiresAllDependenciesFrom")
                        .HasForeignKey("RequiresProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RequiresProduct");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Joins.ProductRequiresOne", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "Product")
                        .WithMany("RequiresOne")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "RequiresProduct")
                        .WithMany("HasRequiresOneDependenciesFrom")
                        .HasForeignKey("RequiresProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RequiresProduct");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Order", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Product", b =>
                {
                    b.HasOne("ProductCatalog.Infrastructure.Models.Database.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ProductCatalog.Infrastructure.Models.Database.ProductTranslation", "Translations", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Language")
                                .HasMaxLength(2)
                                .IsUnicode(false)
                                .HasColumnType("char(2)")
                                .IsFixedLength();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<DateTime>("PeriodEnd")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodEnd");

                            b1.Property<DateTime>("PeriodStart")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodStart");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ProductId", "Language");

                            b1.ToTable("ProductTranslation");

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                {
                                    ttb
                                        .HasPeriodStart("PeriodStart")
                                        .HasColumnName("PeriodStart");
                                    ttb
                                        .HasPeriodEnd("PeriodEnd")
                                        .HasColumnName("PeriodEnd");
                                }
                            ));

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("ProductType");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.ProductType", b =>
                {
                    b.OwnsMany("ProductCatalog.Infrastructure.Models.Database.ProductTypeTranslation", "Translations", b1 =>
                        {
                            b1.Property<int>("ProductTypeId")
                                .HasColumnType("int");

                            b1.Property<string>("Language")
                                .HasMaxLength(2)
                                .IsUnicode(false)
                                .HasColumnType("char(2)")
                                .IsFixedLength();

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<DateTime>("PeriodEnd")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodEnd");

                            b1.Property<DateTime>("PeriodStart")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodStart");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ProductTypeId", "Language");

                            b1.ToTable("ProductTypeTranslation");

                            b1.ToTable(tb => tb.IsTemporal(ttb =>
                                {
                                    ttb
                                        .HasPeriodStart("PeriodStart")
                                        .HasColumnName("PeriodStart");
                                    ttb
                                        .HasPeriodEnd("PeriodEnd")
                                        .HasColumnName("PeriodEnd");
                                }
                            ));

                            b1.WithOwner()
                                .HasForeignKey("ProductTypeId");

                            b1.HasData(
                                new
                                {
                                    ProductTypeId = 1,
                                    Language = "en",
                                    Description = "The type is not set, or is a invalid value!",
                                    Name = "Unknown",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    ProductTypeId = 1,
                                    Language = "nb",
                                    Description = "Typen er ikke satt, eller er en ugyldig verdi!",
                                    Name = "Ukjent",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    ProductTypeId = 2,
                                    Language = "en",
                                    Name = "Module",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    ProductTypeId = 2,
                                    Language = "nb",
                                    Name = "Modul",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    ProductTypeId = 3,
                                    Language = "en",
                                    Name = "Option",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                },
                                new
                                {
                                    ProductTypeId = 3,
                                    Language = "nb",
                                    Name = "Opsjon",
                                    UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001")
                                });
                        });

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Feature", b =>
                {
                    b.Navigation("Excludes");

                    b.Navigation("HasExcludesDependenciesFrom");

                    b.Navigation("HasRequiresAllDependenciesFrom");

                    b.Navigation("HasRequiresOneDependenciesFrom");

                    b.Navigation("RequiresAll");

                    b.Navigation("RequiresOne");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.FeatureType", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.Product", b =>
                {
                    b.Navigation("Excludes");

                    b.Navigation("HasExcludesDependenciesFrom");

                    b.Navigation("HasRequiresAllDependenciesFrom");

                    b.Navigation("HasRequiresOneDependenciesFrom");

                    b.Navigation("Orders");

                    b.Navigation("RequiresAll");

                    b.Navigation("RequiresOne");
                });

            modelBuilder.Entity("ProductCatalog.Infrastructure.Models.Database.ProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
