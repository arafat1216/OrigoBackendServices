# Template for deploying a backend microservice

parameters:
- name: vmImage
  default: 'ubuntu-latest'
- name: environment
  default: 'OrigoV2AKS_Dev.develop'
- name: artifactDirectory
  default: ''
- name: dbConnection
  default: ''
- name: runMigration
  type: boolean
  default: true
- name: useLoggingDb
  type: boolean
  default: true
- name: releaseName
  default: ''
- name: namespace
  default: 'develop'
- name: tag
  default: ''
- name: pipelineWorkspace
  default: ''
- name: helmOverrideDeployValues
  default: ''
- name: generateReleaseNotes
  type: boolean
  default: false
- name: releaseDocName
  default: 'Release_$(Build.BuildNumber).md'

jobs:
- ${{ if eq(parameters.runMigration, true) }}:
  - deployment: MigrateDatabase
    environment: ${{ parameters.environment }}
    displayName: Migrate database
    pool:
      vmImage: windows-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download migration scripts
            inputs:
              artifactName: 'migrations'
              downloadPath: '${{ parameters.artifactDirectory }}/migrations'
          - task: SqlAzureDacpacDeployment@1
            displayName: Run sql migrations
            inputs:
              azureConnectionType: ConnectedServiceNameARM
              azureSubscription: OrigoV2ServiceConnection
              authenticationType: connectionString
              connectionString: ${{ parameters.dbConnection }}
              deployType: SqlTask
              sqlFile: '${{ parameters.artifactDirectory }}/migrations/migrations.sql'
          - ${{ if eq(parameters.useLoggingDb, true) }}:
            - task: SqlAzureDacpacDeployment@1
              displayName: Run logging sql migrations
              inputs:
                azureConnectionType: ConnectedServiceNameARM
                azureSubscription: OrigoV2ServiceConnection
                authenticationType: connectionString
                connectionString: ${{ parameters.dbConnection }}
                deployType: SqlTask
                sqlFile: '${{ parameters.artifactDirectory }}/migrations/logging_migrations.sql'
  
- deployment: Deploy
  displayName: Deploy
  pool:
    vmImage: ${{ parameters.vmImage }}
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self

        - ${{ if eq(parameters.GenerateReleaseNotes, true) }}:
            # Generate Release Notes (Crossplatform)
            # Description - Generates a release notes file in a format of your choice from the build or release history
            - task: XplatGenerateReleaseNotes@3
              displayName: 'Generate release notes'
              inputs: 
                 # Required arguments
                 outputfile: $(System.DefaultWorkingDirectory)\${{ parameters.releaseDocName }}
                 templateLocation: InLine
                 templatefile: 
                 inlinetemplate: |
                    # Notes for release  {{releaseDetails.releaseDefinition.name}}    
                    **Release name**: {{buildDetails.buildNumber}}
                    **Compared Release Number**  : {{compareBuildDetails.buildNumber}}
                    **Environment**  : ${{ parameters.namespace }}

                    # Associated Pull Requests ({{pullRequests.length}})
                    {{#forEach pullRequests}}
                    {{#if isFirst}}### Associated Pull Requests (only shown if  PR) {{/if}}
                    *  **{{this.pullRequestId}}** {{this.title}}
                    {{/forEach}}

                    # Builds with associated Work Items ({{builds.length}})
                    {{#forEach builds}}
                    {{#if isFirst}}## Builds {{/if}}
                    -  Build {{this.build.buildNumber}}
                    {{#forEach this.commits}}
                       - CS {{this.id}}
                          - **Message:** {{this.message}}
                    {{/forEach}}
                    {{#forEach this.workitems}}
                       - WI {{this.id}}
                          - **Title** {{lookup this.fields 'System.Title'}}
                    {{/forEach}} 
                    {{#forEach this.tests}}
                       - Test {{this.id}} 
                          -  **Name** {{this.testCase.name}}
                          -  **Outcome** {{this.outcome}}
                    {{/forEach}} 
                    {{/forEach}}

                    # Global list of Work Items ({{workItems.length}})
                    {{#forEach workItems}}
                    {{#if isFirst}}## Associated Work Items {{/if}}
                    *  **{{this.id}}**  {{lookup this.fields 'System.Title'}}
                       - **Work Item Type** {{lookup this.fields 'System.WorkItemType'}} 
                       - **Tags** {{lookup this.fields 'System.Tags'}}
                       - **Assigned** {{#with (lookup this.fields 'System.AssignedTo')}} {{displayName}} {{/with}}
                       - **Link** https://dev.azure.com/mytos/OrigoV2/_workitems/edit/{{this.id}}
                    {{/forEach}}

                    # Global list of Commits ({{commits.length}})
                    {{#forEach commits}}
                    {{#if isFirst}}### Associated commits{{/if}}
                    * ** ID{{this.id}}** 
                       -  **Message:** {{this.message}}
                       -  **Commited by:** {{this.author.displayName}} 
                       -  **FileCount:** {{this.changes.length}} 
                    {{#forEach this.changes}}
                          -  **File path:** {{this.item.path}}
                    {{/forEach}}
                    {{/forEach}}
                    
                 dumpPayloadToConsole: true
                 dumpPayloadToFile: false
                 replaceFile: True
                 appendToFile: True
                 getParentsAndChildren: False
                 getAllParents: False
                 getIndirectPullRequests: False
                 stopOnError: False
                 considerPartiallySuccessfulReleases: False
                 checkForManuallyLinkedWI: true
                 wiqlFromTarget: WorkItems
                 checkStage: true

            # Git based WIKI Single File Updater from Black Marble
            # Description - A tools to update or create a file in a WIKI based in a Git repo
            - task: WikiUpdaterTask@1
              inputs:
                 # Required arguments
                 repo: dev.azure.com/mytos/OrigoV2/_git/OrigoV2.wiki
                 filename: Releases/${{ parameters.namespace }}/${{ parameters.releaseName }}-${{ parameters.releaseDocName }}
                 sourceFile: $(System.DefaultWorkingDirectory)\${{ parameters.releaseDocName }}
                 dataIsFile: true
                 replaceFile: false
                 appendToFile: True
                 contents:
                 message: "automatically generated release document"
                 gitname: 
                 gitemail: 
                 localpath: $(System.DefaultWorkingDirectory)\repo
                 useAgentToken: true

        - task: HelmInstaller@0
          displayName: Install Helm
          inputs:
            helmVersion: 'latest'
            installKubectl: true

        - task: HelmDeploy@0
          displayName: Helm upgrade
          inputs:
            command: upgrade
            chartType: FilePath
            releaseName: ${{ parameters.releaseName }}
            namespace: ${{ parameters.namespace }}
            overrideValues: "deployment.image.tag=${{ parameters.tag }},namespace=${{ parameters.namespace }},deployment.probes.enabled=true${{ parameters.helmOverrideDeployValues }}"
            arguments: --version ${{ parameters.tag }}
            chartPath: ${{ parameters.pipelineWorkspace }}/helmcharts
            install: true