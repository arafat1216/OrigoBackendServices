# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - main
    - release
    - develop
  paths:
    include:
    - azure-pipelines-customers.yml
    - charts/customer-api
    - src/Core
    - src/Services/Customer

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '09ee8083-2a55-4731-876c-d6df7059bd8f'
  imageRepository: 'customersbackend'
  containerRegistry: 'origov2acr.azurecr.io'
  dockerfilePath: 'src/Services/Customer/Customer.API/Dockerfile'
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    namespace: prod
    tag: '$(Build.BuildId)_prod'
    hostname: origov2dev.mytos.no
  ${{ elseif eq(variables['Build.SourceBranchName'], 'release') }}:
    namespace: test
    tag: '$(Build.BuildId)_test'
    hostname: origov2test.mytos.no
  ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
    namespace: develop
    tag: '$(Build.BuildId)_develop'
    hostname: origov2prod.mytos.no

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MigrationScripts
    displayName: Migration scripts
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: 'dotnet tool install --global dotnet-ef'
      displayName: Install EF Core

    - script: 'dotnet ef migrations script --context CustomerContext --idempotent --output $(build.artifactstagingdirectory)/migrations/migrations.sql --project src/Services/Customer/CustomerServices/CustomerServices.csproj'
      displayName: Create customer migration scripts

    - script: 'dotnet ef migrations script --context LoggingDbContext --idempotent --output $(build.artifactstagingdirectory)/migrations/logging_migrations.sql --project src/Services/Customer/CustomerServices/CustomerServices.csproj'
      displayName: Create customer logging migration scripts

    - task: PublishPipelineArtifact@1
      displayName: 'Publish migrations'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)/migrations'
        artifact: 'migrations'
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2 # Can't use buildAndPush since arguments are needed
      displayName: Build image
      inputs:
        command: build
        buildContext: '$(Build.Repository.LocalPath)'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --build-arg SONAR_TOKEN=$(SonarToken) --build-arg BUILD_ID=$(Build.BuildId)
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Push an image to container registry
      inputs:
        command: push
        buildContext: '$(Build.Repository.LocalPath)'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - pwsh: |
        $id=docker images --filter "label=test=$(Build.BuildId)" -q | Select-Object -First 1
        docker create --name testcontainer $id
        docker cp testcontainer:/TestResults $(Build.SourcesDirectory)/TestResults
        docker cp testcontainer:/CodeCoverage $(Build.SourcesDirectory)/CodeCoverage
        docker rm testcontainer
      displayName: 'Copy test results' 

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/coverage.cobertura.xml'
      displayName: 'Publish code coverage'

    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
      displayName: 'Publish test results'

    - publish: charts/customer-api
      artifact: helmcharts

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  variables:
    - group: CustomerLibrary
  jobs:
  - deployment: MigrateDatabase
    environment: 'BackendServices.develop'
    displayName: Migrate database
    variables:
      namespace: develop
    pool:
      vmImage: windows-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download migration scripts
            inputs:
              artifactName: 'migrations'
              downloadPath: '$(System.ArtifactsDirectory)/migrations'
          - task: SqlAzureDacpacDeployment@1
            displayName: Run sql migrations
            inputs:
              azureConnectionType: ConnectedServiceNameARM
              azureSubscription: OrigoV2ServiceConnection
              authenticationType: connectionString
              connectionString: $(CustomerDbConnection)
              deployType: SqlTask
              sqlFile: $(System.ArtifactsDirectory)/migrations/migrations.sql
          - task: SqlAzureDacpacDeployment@1
            displayName: Run sql migrations
            inputs:
              azureConnectionType: ConnectedServiceNameARM
              azureSubscription: OrigoV2ServiceConnection
              authenticationType: connectionString
              connectionString: $(CustomerDbConnection)
              deployType: SqlTask
              sqlFile: $(System.ArtifactsDirectory)/migrations/logging_migrations.sql

  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'BackendServices.develop'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: HelmInstaller@0
            displayName: Install Helm
            inputs:
              helmVersion: 'latest'
              installKubectl: true

          - task: HelmDeploy@0
            displayName: Helm upgrade
            inputs:
              command: upgrade
              chartType: FilePath
              releaseName: customerservices
              namespace: $(namespace)
              overrideValues: deployment.image.tag=$(tag),namespace=$(namespace),ingress.hosts.host=$(hostname),ingress.tls.hosts[0]=$(hostname)
              arguments: --version $(tag)
              chartPath: $(Pipeline.Workspace)/helmcharts
              install: true

  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)
      
    environment: 'BackendServices.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: develop

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: HelmInstaller@0
            displayName: Install Helm
            inputs:
              helmVersion: 'latest'
              installKubectl: true

          - task: HelmDeploy@0
            displayName: Helm upgrade
            inputs:
              command: upgrade
              chartType: FilePath
              releaseName: customerservices
              namespace: $(k8sNamespaceForPR)
              overrideValues: deployment.image.tag=$(tag),namespace=$(k8sNamespaceForPR),ingress.hosts.host=$(hostname),ingress.tls.hosts[0]=$(hostname)
              arguments: --version $(tag)
              chartPath: $(Pipeline.Workspace)/helmcharts
              install: true

          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ] 
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"