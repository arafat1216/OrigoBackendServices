# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '09ee8083-2a55-4731-876c-d6df7059bd8f'
  imageRepository: 'assetsbackend'
  containerRegistry: 'origov2acr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'origov2acr3b6d-auth'

  azureSubscriptionEndpoint: 
  azureContainerRegistry: contoso.azurecr.io
  azureResourceGroup: Contoso
  kubernetesCluster: Contoso

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: MigrationScripts
  displayName: Create migration scripts
  jobs:
  - job: MigrationScripts
    displayName: Migration scripts
    pool:
      vmImage: windows-latest
    steps:
    - task: efcore-migration-script-generator-task@0
      displayName: Create database migration scripts
      inputs:
        installdependencies: true # required for net 3.1+
        projectpath: '$(Build.SourcesDirectory)/OrigoAssetServices/OrigoAssetServices.csproj'
        databasecontexts: 'AssetsContext'
        targetfolder: '$(build.artifactstagingdirectory)/migrations'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish migrations'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)/migrations'
        artifact: 'migrations'

- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - publish: OrigoAssetServices/charts
      artifact: helmcharts

- stage: Deploy
  displayName: Deploy stage
  dependsOn:
    - Build
    - MigrationScripts
  variables:
    - group: AssetsLibrary
  jobs:
  - deployment: MigrateDatabase
    environment: 'AssetsBackend.develop'
    displayName: Migrate database
    variables:
      namespace: develop
    pool:
      vmImage: windows-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download migration scripts
            inputs:
              artifactName: 'migrations'
              downloadPath: '$(System.ArtifactsDirectory)/migrations'
          - task: SqlAzureDacpacDeployment@1
            displayName: Run sql migrations
            inputs:
              azureConnectionType: ConnectedServiceNameARM
              azureSubscription: OrigoV2ServiceConnection
              authenticationType: connectionString
              connectionString: $(AssetsDbConnection)
              deployType: SqlTask
              sqlFile: $(System.ArtifactsDirectory)/migrations/YourDBContext.sql$(System.ArtifactsDirectory)/migrations/AssetsDbContext.sql

  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'AssetsBackend.develop'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: HelmInstaller@0
            displayName: Install Helm
            inputs:
              helmVersion: 'latest'
              installKubectl: true

          - task: HelmDeploy@0
            displayName: Helm upgrade
            inputs:
              command: upgrade
              chartType: FilePath
              overrideValues: image.tag=$(tag)
              arguments: --version $(tag)
              chartPath: $(Pipeline.Workspace)/helmcharts/origoassetservices
              install: true

  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)
      
    environment: 'AssetsBackend.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: develop

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
          
          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'
              
          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ] 
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
