# Deploy to Azure Kubernetes Service

trigger:
  branches:
    include:
    - trunk
  paths:
    include:
    - azure-pipelines-assets.yml
    - charts/asset-api
    - src/Core
    - src/Services/Asset

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '09ee8083-2a55-4731-876c-d6df7059bd8f'
  artifactsFeedSource: 'https://pkgs.dev.azure.com/mytos/OrigoV2/_packaging/Origo2/nuget/v3/index.json'
  imageRepository: 'assetsbackend'
  containerRegistry: 'origov2acr.azurecr.io'

  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    namespace: prod
    tag: '$(Build.BuildId)_prod'
    currentDbConnection: '$(AssetsDbConnectionProd)'
    environment: 'BackendServices.prod'
  ${{ elseif eq(variables['Build.SourceBranchName'], 'release') }}:
    namespace: test
    tag: '$(Build.BuildId)_test'
    currentDbConnection: '$(AssetsDbConnectionTest)'
    environment: 'BackendServices.develop'
  ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
    namespace: develop
    tag: '$(Build.BuildId)_develop'
    currentDbConnection: '$(AssetsDbConnection)'
    environment: 'BackendServices.develop'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - template: general-build.yaml
    parameters:
      vmImage: 'ubuntu-latest'
      dbContext: 'AssetsContext'
      dbProject: 'src/Services/Asset/AssetServices/AssetServices.csproj'
      migrationScriptOutputDir: '$(build.artifactstagingdirectory)/migrations'
      buildRepositoryLocalPath: '$(Build.Repository.LocalPath)'
      imageRepository: '$(imageRepository)'
      dockerfilePath: 'src/Services/Asset/Asset.API/Dockerfile'
      dockerRegistryServiceConnection: '09ee8083-2a55-4731-876c-d6df7059bd8f'
      buildId: '$(Build.BuildId)'
      sonarToken: '$(SonarToken)'
      artifactsFeedSource: 'https://pkgs.dev.azure.com/mytos/OrigoV2/_packaging/Origo2/nuget/v3/index.json'
      vssNugetAccessToken: $(VSS_NUGET_ACCESSTOKEN)
      buildSourcesDirectory: $(Build.SourcesDirectory)


#- stage: DeployDev
#  displayName: Deploy to Dev
#  dependsOn: Build
#  variables:
#    - group: AssetsLibrary
#  jobs:
#  - deployment: MigrateDatabase
#    environment: 'BackendServices.develop'
#    displayName: Migrate database
#    pool:
#      vmImage: windows-latest
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - task: DownloadPipelineArtifact@2
#            displayName: Download migration scripts
#            inputs:
#              artifactName: 'migrations'
#              downloadPath: '$(System.ArtifactsDirectory)/migrations'
#          - task: SqlAzureDacpacDeployment@1
#            displayName: Run asset sql migrations
#            inputs:
#              azureConnectionType: ConnectedServiceNameARM
#              azureSubscription: OrigoV2ServiceConnection
#              authenticationType: connectionString
#              connectionString: $(currentDbConnection)
#              deployType: SqlTask
#              sqlFile: $(System.ArtifactsDirectory)/migrations/migrations.sql
#          - task: SqlAzureDacpacDeployment@1
#            displayName: Run asset logging sql migrations
#            inputs:
#              azureConnectionType: ConnectedServiceNameARM
#              azureSubscription: OrigoV2ServiceConnection
#              authenticationType: connectionString
#              connectionString: $(currentDbConnection)
#              deployType: SqlTask
#              sqlFile: $(System.ArtifactsDirectory)/migrations/logging_migrations.sql

#  - deployment: Deploy
#    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
#    displayName: Deploy
#    pool:
#      vmImage: $(vmImageName)
#    environment: $(environment)
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - checkout: self

#          - task: HelmInstaller@0
#            displayName: Install Helm
#            inputs:
#              helmVersion: 'latest'
#              installKubectl: true

#          - task: HelmDeploy@0
#            displayName: Helm upgrade
#            inputs:
#              command: upgrade
#              chartType: FilePath
#              releaseName: assetservices
#              namespace: $(namespace)
#              overrideValues: "deployment.image.tag=$(tag),namespace=$(namespace),deployment.probes.enabled=true"
#              arguments: --version $(tag)
#              chartPath: $(Pipeline.Workspace)/helmcharts
#              install: true